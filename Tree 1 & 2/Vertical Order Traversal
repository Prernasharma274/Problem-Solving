//Iterative Approach
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,map<int,multiset<int>>>map;
        queue<pair<TreeNode*,pair<int,int>>>q;
        q.push({root,{0,0}});
        while(!q.empty())
       {
            auto curr=q.front();
            q.pop();
            TreeNode* node=curr.first;
            int x=curr.second.first;
            int y=curr.second.second; 
            map[x][y].insert(node->val);            
            if(node->left) 
            {
                q.push({node->left,{x-1 , y+1}});
            }
            if(node->right) 
            {
                q.push({node->right,{x+1,y+1}});
            }
        }
        vector<vector<int>>result;
        for(auto p:map) 
       {
            vector<int>ans;
            for(auto q:p.second) 
            {
                ans.insert(ans.end(),q.second.begin(),q.second.end());
            }
            result.push_back(ans);
        }
        return result;
    }
};

// Recursion


class Solution {
public:
    void func(TreeNode*root,map<int,vector<pair<int,int>>>&m,int w,int h)
    {
        if(root==NULL)
            return;
        m[w-1].push_back({h+1,root->val});
        func(root->left,m,w-1,h+1);
        func(root->right,m,w+1,h+1);
    }
    vector<vector<int>> verticalTraversal(TreeNode* root)
    {
        vector<vector<int>>ans;
        if(root==NULL)
            return ans;
        map<int,vector<pair<int,int>>>m;
        fun(root,m,0,0);
        for(auto it:m)
        {
            vector<int>tmp;
            sort(it.second.begin(),it.second.end());
            for(auto iit:it.second)
                tmp.push_back(iit.second);
            ans.push_back(tmp);
        }
        return ans;
    }
};
