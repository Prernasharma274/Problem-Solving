class TrieNode {
public:
    int numi;
    int sumi;
    TrieNode* child[2];
    
    TrieNode() : numi(0), sumi(0) 
    {
        child[0]=NULL;
        child[1]= NULL;
    }
};
class Solution {
public:
    void addNumber(TrieNode* root,int num,int idx){
        for( int i=31;i>=0;i--)
        {   
            int bit=1&(num >>i);       
            if (root->child[bit]==NULL)
            root->child[bit]=new TrieNode();
            root=root->child[bit];
        }
        root->sumi+=idx;
        root->numi++;
    }
    int calc(TrieNode* root,int num,int idx)
    {
        for(int i=31;i>=0;i--)
        {
            int bit=1&(num>>i);  
            if (root->child[bit]==NULL)
                return 0;
            root=root->child[bit];
        }
        return(((root->numi)*idx)-(root->sumi));
    }
    int countTriplets(vector<int>& arr) {
        long long ans=0;
        int x=0;
        TrieNode* root = new TrieNode();
        for ( int i=0;i<arr.size();i++){
            addNumber(root,x,i);
            x^=arr[i];
            ans=(ans + calc(root,x,i))%1000000007;
        }
        return ans;
    }
};
