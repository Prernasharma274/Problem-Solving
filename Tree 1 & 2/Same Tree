//recursive
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL && q==NULL) return true;
        if(p==NULL || q==NULL) return false;
        if(p->val!=q->val) return false;
        return (isSameTree(p->right,q->right) && isSameTree(p->left,q->left));
    }
};



//iterative
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        
     if(p==NULL && q==NULL)
      {
          return true;
      } 
     if(!(p && q))
      {
          return false;
      }  
     queue<TreeNode*> q1,q2;
        q1.push(p);
        q2.push(q);
        while(!q1.empty() && !q2.empty())
          {
            TreeNode* n1=q1.front();
            TreeNode* n2=q2.front();
            q1.pop();
            q2.pop();
            if(n1->val!=n2->val) 
                return false;
            if((n1->left==NULL && n2->left) || (n1->left && n2->left==NULL))
                return false;
            else if(n1->left && n2->left) {
                q1.push(n1->left);
                 q2.push(n2->left);
            }
           
           if((n1->right==NULL && n2->right) || (n1->right && n2->right==NULL))
                return false;
            else if(n2->right && n2->right) {
                q1.push(n1->right);
                q2.push(n2->right);
             }               
        }
          return true;
    }
  
};
