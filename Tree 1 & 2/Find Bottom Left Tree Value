//iterative
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*>q;
        q.push(root);
        q.push(NULL);
        int vall=root->val;
        while(!q.empty()){
            TreeNode* temp=q.front();
            if(temp==NULL && q.size()!=1)
            {
               q.push(NULL);
               q.pop();
               vall=q.front()->val;
               continue;
            }
            else if(temp==NULL && q.size()==1)
            {
                break;
            }
            q.pop();
            if(temp->left)
            {
                q.push(temp->left);
            }
            if(temp->right)
            {
                q.push(temp->right);
            }
        }
        return vall;
    }
};


//recursive
class Solution {
public:
    int maxd,bval;    
    void Helper(TreeNode* root,int depth){
        if(root==NULL) return;
        if(depth>maxd)
        {
            maxd=depth;
            bval=root->val;
        }
        Helper(root->left,depth+1);
        Helper(root->right,depth+1);
    }
    
    int findBottomLeftValue(TreeNode* root) {
        maxd=-1;
        bval=-1;
        Helper(root,0);
        return bval;
    }
};
