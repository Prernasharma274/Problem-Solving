//Recursive
void leftview(TreeNode *root, int level, vector<int> &ans)
    {
        if(root==NULL) 
          return ;
        if(ans.size()==level) 
          ans.push_back(root->val);
        leftview(root->left,level+1,ans);
        leftview(root->right,level+1,ans);
    }
vector<int> printLeftView(BinaryTreeNode<int>* root) {
    // Write your code here.
    vector<int>ans;
    leftview(root,0,ans);
    return ans;
}

//iterative
void leftv(struct node* root,queue<node*>& que)
{
    if (root==NULL) return;
    que.push(root);
    que.push(NULL);
    while (!que.empty())
    {
        node* temp=que.front();
        if (temp) 
       {
            cout<<temp->data<<" ";
            while (que.front()!=NULL) 
            {
                if(temp->left)
                    que.push(temp->left);
                if (temp->right)
                    que.push(temp->right);
                temp=que.front();
            }
            que.push(NULL);
        }
        que.pop();
    }
}
void leftView(struct node* root)
{
    queue<node*>que;
    leftV(root,que);
}
