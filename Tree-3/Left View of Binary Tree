//Recursive
void leftview(TreeNode *root, int level, vector<int> &ans)
    {
        if(root==NULL) 
          return ;
        if(ans.size()==level) 
          ans.push_back(root->val);
        leftview(root->left,level+1,ans);
        leftview(root->right,level+1,ans);
    }
vector<int> printLeftView(BinaryTreeNode<int>* root) {
    // Write your code here.
    vector<int>ans;
    leftview(root,0,ans);
    return ans;
}

//iterative
void leftv(struct node* root,queue<node*>& q)
{
    if (root == NULL)
        return;
    q.push(root);
    q.push(NULL);
    while (!q.empty())
    {
        node* temp = q.front();
        if (temp) 
       {
            cout << temp->data << " ";
            while (q.front() != NULL) 
            {
                if (temp->left)
                    q.push(temp->left);
                if (temp->right)
                    q.push(temp->right);
                temp = q.front();
            }
            q.push(NULL);
        }
        q.pop();
    }
}
void leftView(struct node* root)
{
    queue<node*> q;
    leftV(root, q);
}
